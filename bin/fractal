#!/usr/bin/env ruby
require 'fractal'
args = Hash[ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/)]

if args.key? 'help'
  help = <<EOF

`fractal` command-line arguments:

  -  `-w=`, the pixel width of the output image.
     (Defaults to 300), e.g. `-w=500`
  -  `-h=`, the pixel height of the output image.
     (Defaults to 300), e.g. `-h=240`
  -  `--color=`, (Defaults to mono), allows you to draw
     the image in colour or monochromatically,
     e.g. `--color=mono` or `--color=multi`
     which is the same as `--color=rainbow`
  -  `-o=`, (*optional*) is the location in which to save
     your image, the `-o=` part is not required if you
     just write the file location with a `.png` at the end.
  -  `--def=`, (optional), the 'definition' of the image,
     the amount of calculations performed or iterations of
     the formula. e.g. `--def=100` for 100 iterations.
  -  `--scale=`, (optional), the zoom level of the image,
     a higher value corresponds to a taller imaginary number line
     thus a smaller fractal is seen. e.g. `--scale=2.25`
  -  `--offset=x,y` (optional), the offset will make you able
     to position yourself where you like on the plan.
     (offsetting where the centre is, before (0,0) was
     the centre of the image, but now your offset is the centre).
     Make sure you give an x and y value as numerics,
     (ints and floats work both and don't leave any spaces
     between the comma).
  -  `--complex=` (*only needed for the Julia set*)
     this sets a complex coordinate for the Julia set,
     in the form of `a±bi` ('a' and 'b' real numbers and
     'i' is the square root of -1 which can take on all
     values in the complex plane), e.g. '-0.8+0.4i'
  -  Last but not least, (required), the type of fractal drawn.
     This argument is composed of just the fractal's name,
     put at any position in your list of arguments.
     e.g. `mandelbrot` or `julia`

Example commands:
`fractal ~/my_fractal.png -w=500 -h=310 --scale=2.92 --def=100 mandelbrot --color=mono`
`fractal julia -w=600 -h=600 --color=multi --complex=-0.8+0.156i --def=100 --scale=1.5 -o=../my_fractal`

EOF
  puts help
  exit 0
end

allowed_fractals = ['mandelbrot', 'julia']
fractal_type = String.new

o = String.new
ARGV.each do |arg|
  allowed_fractals.each do |option|
    fractal_type = arg.downcase if arg.downcase == option
  end

  o = arg if arg[arg.length - 4, 4].downcase == '.png'
end

o = args['o'] if args.key? 'o'
if o.include? '~'
  o.delete! '~'
  o = "#{File.expand_path('~')}/#{o}"
end


if fractal_type.empty?
  puts "Error: Please provide a fractal type.\nType `fractal --help` for help."
  exit 1
end

width = height = 0
width  = args['w'].to_i if args.key? 'w' # -w=2000
height = args['h'].to_i if args.key? 'h' # -h=1500

if width <= 0 || height <= 0
  puts "Warning, width and/or height not provided.\nSetting to default: 300x300"
  width = height = 300
end

ca = cb = nil
if args.key? 'complex'
  complex = args['complex']
  ca, cb = complex.split(/(?=[+\-])/)
  ca = ca.to_f
  cb.delete! "i"
  cb = cb.to_f
end

if fractal_type == 'julia' && (ca.nil? || cb.nil?)
  puts "Error: fractal type: '#{fractal_type}' requires complex coordinate,\n in form of '±c₁±c₂i', for example: -0.416+0.8i"
  exit 1
end

png = ChunkyPNG::Image.new width, height

case fractal_type
when 'mandelbrot'
  fractal = Fractals::Mandelbrot.new png
when 'julia'
  fractal = Fractals::Julia.new png
  fractal.real = ca
  fractal.imaginary = cb
else
  fractal = Fractals::Mandelbrot.new png
end


fractal.colouring = args['color'] if args.key? 'color' # --color=mono
fractal.colouring = args['mode'] if args.key? 'mode' # --mode=mono

definition, scale = 255, 2.0
definition = args['def'].to_i if args.key? 'def' # --def=100
scale = args['scale'].to_f if args.key? 'scale'  # --scale=1.5
offset = [0, 0]
offset = args['offset'].split(',').map(&:to_f) if args.key? 'offset'

unless o.empty?
  fractal.draw(definition, scale, offset).save(o)
  exit 0
end

fractal.draw(definition, scale, offset).save("#{fractal_type}-fractal.png")
